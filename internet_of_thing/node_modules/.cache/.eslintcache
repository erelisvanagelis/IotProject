[{"C:\\Users\\Acer\\repos\\IotProject\\internet_of_thing\\src\\index.js":"1","C:\\Users\\Acer\\repos\\IotProject\\internet_of_thing\\src\\reportWebVitals.js":"2","C:\\Users\\Acer\\repos\\IotProject\\internet_of_thing\\src\\App.js":"3","C:\\Users\\Acer\\repos\\IotProject\\internet_of_thing\\src\\util\\Constants.js":"4","C:\\Users\\Acer\\repos\\IotProject\\internet_of_thing\\src\\components\\SensorValueRow.js":"5","C:\\Users\\Acer\\repos\\IotProject\\internet_of_thing\\src\\components\\ButtonDeviceRow.js":"6","C:\\Users\\Acer\\repos\\IotProject\\internet_of_thing\\src\\API\\IoT.js":"7"},{"size":500,"mtime":1647363607195,"results":"8","hashOfConfig":"9"},{"size":362,"mtime":1647363607672,"results":"10","hashOfConfig":"9"},{"size":3461,"mtime":1648017558653,"results":"11","hashOfConfig":"9"},{"size":210,"mtime":1647453281379,"results":"12","hashOfConfig":"9"},{"size":545,"mtime":1647453005065,"results":"13","hashOfConfig":"9"},{"size":1110,"mtime":1647499830794,"results":"14","hashOfConfig":"9"},{"size":1089,"mtime":1647978103978,"results":"15","hashOfConfig":"9"},{"filePath":"16","messages":"17","suppressedMessages":"18","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"xptm0k",{"filePath":"19","messages":"20","suppressedMessages":"21","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"22","messages":"23","suppressedMessages":"24","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"25"},{"filePath":"26","messages":"27","suppressedMessages":"28","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"29","messages":"30","suppressedMessages":"31","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"32","messages":"33","suppressedMessages":"34","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"35","messages":"36","suppressedMessages":"37","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"C:\\Users\\Acer\\repos\\IotProject\\internet_of_thing\\src\\index.js",[],[],"C:\\Users\\Acer\\repos\\IotProject\\internet_of_thing\\src\\reportWebVitals.js",[],[],"C:\\Users\\Acer\\repos\\IotProject\\internet_of_thing\\src\\App.js",["38","39","40"],[],"import logo from \"./logo.svg\";\nimport \"./App.css\";\nimport { Box, Container, Divider, Stack } from \"@mui/material\";\nimport { sizing } from \"@mui/system\";\nimport SensorValueRow from \"./components/SensorValueRow\";\nimport { useEffect, useState } from \"react\";\nimport ButtonDeviceRow from \"./components/ButtonDeviceRow\";\nimport { ON_OF_SET, MEASUREMENTS } from \"./util/Constants\";\nimport { getDeviceData, getSensorData, updateDeviceState } from \"./API/IoT\";\n\nfunction App() {\n  const [sensorState, setSensorState] = useState({\n    motion1: {\n      description: \"Motion (1)\",\n      measure: MEASUREMENTS.distance,\n      value: 0,\n    },\n    motion2: {\n      description: \"Motion (2)\",\n      measure: MEASUREMENTS.distance,\n      value: 0,\n    },\n    temperature: {\n      description: \"Temperature\",\n      measure: MEASUREMENTS.temperature,\n      value: 0,\n    },\n    moisture: {\n      description: \"Moisture\",\n      measure: MEASUREMENTS.moisture,\n      value: 0,\n    },\n  });\n\n  const [deviceState, setDeviceState] = useState({\n    light1: {\n      description: \"Light (1)\",\n      value: \"off\",\n    },\n    light2: {\n      description: \"Light (2)\",\n      value: \"off\",\n    },\n    light3: {\n      description: \"Light (3)\",\n      value: \"off\",\n    },\n  });\n\n  useEffect(() => {\n    const fetchData = async () => {\n      await new Promise((r) => setTimeout(r, 300));   \n      const copy = { ...sensorState };\n      const response = await getSensorData();\n      if (response.success) {\n        Object.keys(response.response).map(\n          (key, index) => (copy[key].value = response.response[key])\n        );\n      }\n      setSensorState({ ...copy });\n    };\n    fetchData();\n  }, [sensorState]);\n\n  useEffect(() => {\n    const fetchData = async () => {\n      console.log(\"fetchDeviceDataCalled\")\n      await new Promise((r) => setTimeout(r, 300));    \n      const copy = { ...deviceState };\n      const response = await getDeviceData();\n      if (response.success) {\n        Object.keys(response.response).map(\n          (key, index) => (copy[key].value = response.response[key])\n        );\n      }\n      setDeviceState({ ...copy });\n    };\n    fetchData();\n  }, [deviceState]);\n\n  return (\n    <div className=\"App-header\">\n      <Container\n        maxWidth=\"lg\"\n        sx={{ backgroundColor: \"#778899\", minHeight: \"100vh\" }}\n      >\n        <Stack>\n          <h2>Sensor Data:</h2>\n          <Stack sx={{ marginLeft: 3 }}>\n            {Object.keys(sensorState).map((key, index) => (\n              <SensorValueRow\n                description={sensorState[key].description}\n                value={sensorState[key].value}\n                measure={sensorState[key].measure}\n              />\n            ))}\n          </Stack>\n          <Divider />\n\n          <h2>Device Status:</h2>\n          <Stack sx={{ marginLeft: 3 }}>\n            {Object.keys(deviceState).map((key, index) => (\n              <ButtonDeviceRow\n                description={deviceState[key].description}\n                selectedValue={deviceState[key].value}\n                buttonsValueTitleSet={ON_OF_SET}\n                setSelectedValue={(value) => {\n                  // const copy = { ...deviceState };\n                  // copy[key].value = value;\n                  // // setDeviceState({ ...copy });\n                  updateDeviceState(key, value);\n                }}\n              />\n            ))}\n          </Stack>\n        </Stack>\n      </Container>\n    </div>\n  );\n}\n\nexport default App;\n","C:\\Users\\Acer\\repos\\IotProject\\internet_of_thing\\src\\util\\Constants.js",[],[],"C:\\Users\\Acer\\repos\\IotProject\\internet_of_thing\\src\\components\\SensorValueRow.js",[],[],"C:\\Users\\Acer\\repos\\IotProject\\internet_of_thing\\src\\components\\ButtonDeviceRow.js",[],[],"C:\\Users\\Acer\\repos\\IotProject\\internet_of_thing\\src\\API\\IoT.js",[],[],{"ruleId":"41","severity":1,"message":"42","line":1,"column":8,"nodeType":"43","messageId":"44","endLine":1,"endColumn":12},{"ruleId":"41","severity":1,"message":"45","line":3,"column":10,"nodeType":"43","messageId":"44","endLine":3,"endColumn":13},{"ruleId":"41","severity":1,"message":"46","line":4,"column":10,"nodeType":"43","messageId":"44","endLine":4,"endColumn":16},"no-unused-vars","'logo' is defined but never used.","Identifier","unusedVar","'Box' is defined but never used.","'sizing' is defined but never used."]