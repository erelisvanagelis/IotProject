{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Acer\\\\ReactNativeProjects\\\\internet_of_things\\\\src\\\\App.js\",\n    _s = $RefreshSig$();\n\nimport logo from \"./logo.svg\";\nimport \"./App.css\";\nimport { Box, Container, Divider, Stack } from \"@mui/material\";\nimport { sizing } from \"@mui/system\";\nimport SensorValueRow from \"./components/SensorValueRow\";\nimport { useEffect, useState } from \"react\";\nimport ButtonDeviceRow from \"./components/ButtonDeviceRow\";\nimport { ON_OF_SET, MEASUREMENTS } from \"./util/Constants\";\nimport { getDeviceData, getSensorData, updateDeviceState } from \"./API/IoT\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction App() {\n  _s();\n\n  const [sensorState, setSensorState] = useState({\n    motion1: {\n      description: \"Motion (1)\",\n      measure: MEASUREMENTS.distance,\n      value: 0\n    },\n    motion2: {\n      description: \"Motion (2)\",\n      measure: MEASUREMENTS.distance,\n      value: 0\n    },\n    temperature: {\n      description: \"Temperature\",\n      measure: MEASUREMENTS.temperature,\n      value: 0\n    },\n    moisture: {\n      description: \"Moisture\",\n      measure: MEASUREMENTS.moisture,\n      value: 0\n    }\n  });\n  const [deviceState, setDeviceState] = useState({\n    light1: {\n      description: \"Light (1)\",\n      value: \"off\"\n    },\n    light2: {\n      description: \"Light (2)\",\n      value: \"off\"\n    },\n    light3: {\n      description: \"Light (3)\",\n      value: \"off\"\n    }\n  });\n  useEffect(() => {\n    const fetchData = async () => {\n      await new Promise(r => setTimeout(r, 5000));\n      const copy = { ...sensorState\n      };\n      const response = await getSensorData();\n\n      if (response.success) {\n        Object.keys(response.response).map((key, index) => copy[key].value = response.response[key]);\n        setSensorState({ ...copy\n        });\n      }\n    };\n\n    fetchData();\n  }, [sensorState]);\n  useEffect(() => {\n    const fetchData = async () => {\n      const copy = { ...deviceState\n      };\n      const response = await getDeviceData();\n\n      if (response.success) {\n        Object.keys(response.response).map((key, index) => copy[key].value = response.response[key]);\n        setDeviceState({ ...copy\n        });\n      }\n    };\n\n    fetchData();\n  }, []);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"App-header\",\n    children: /*#__PURE__*/_jsxDEV(Container, {\n      maxWidth: \"lg\",\n      sx: {\n        backgroundColor: \"#778899\",\n        minHeight: \"100vh\"\n      },\n      children: /*#__PURE__*/_jsxDEV(Stack, {\n        children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n          children: \"Sensor Data:\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 86,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Stack, {\n          sx: {\n            marginLeft: 3\n          },\n          children: Object.keys(sensorState).map((key, index) => /*#__PURE__*/_jsxDEV(SensorValueRow, {\n            description: sensorState[key].description,\n            value: sensorState[key].value,\n            measure: sensorState[key].measure\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 89,\n            columnNumber: 15\n          }, this))\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 87,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Divider, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 96,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"h2\", {\n          children: \"Device Status:\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 98,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Stack, {\n          sx: {\n            marginLeft: 3\n          },\n          children: Object.keys(deviceState).map((key, index) => /*#__PURE__*/_jsxDEV(ButtonDeviceRow, {\n            description: deviceState[key].description,\n            selectedValue: deviceState[key].value,\n            buttonsValueTitleSet: ON_OF_SET,\n            setSelectedValue: value => {\n              const copy = { ...deviceState\n              };\n              copy[key].value = value;\n              setDeviceState({ ...copy\n              });\n              updateDeviceState(key, value);\n            }\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 101,\n            columnNumber: 15\n          }, this))\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 99,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 85,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 81,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 80,\n    columnNumber: 5\n  }, this);\n}\n\n_s(App, \"8Oc09bJZZK5TVEMt7h6e5zT6LX0=\");\n\n_c = App;\nexport default App;\n\nvar _c;\n\n$RefreshReg$(_c, \"App\");","map":{"version":3,"sources":["C:/Users/Acer/ReactNativeProjects/internet_of_things/src/App.js"],"names":["logo","Box","Container","Divider","Stack","sizing","SensorValueRow","useEffect","useState","ButtonDeviceRow","ON_OF_SET","MEASUREMENTS","getDeviceData","getSensorData","updateDeviceState","App","sensorState","setSensorState","motion1","description","measure","distance","value","motion2","temperature","moisture","deviceState","setDeviceState","light1","light2","light3","fetchData","Promise","r","setTimeout","copy","response","success","Object","keys","map","key","index","backgroundColor","minHeight","marginLeft"],"mappings":"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","sourcesContent":["import logo from \"./logo.svg\";\nimport \"./App.css\";\nimport { Box, Container, Divider, Stack } from \"@mui/material\";\nimport { sizing } from \"@mui/system\";\nimport SensorValueRow from \"./components/SensorValueRow\";\nimport { useEffect, useState } from \"react\";\nimport ButtonDeviceRow from \"./components/ButtonDeviceRow\";\nimport { ON_OF_SET, MEASUREMENTS } from \"./util/Constants\";\nimport { getDeviceData, getSensorData, updateDeviceState } from \"./API/IoT\";\n\nfunction App() {\n  const [sensorState, setSensorState] = useState({\n    motion1: {\n      description: \"Motion (1)\",\n      measure: MEASUREMENTS.distance,\n      value: 0,\n    },\n    motion2: {\n      description: \"Motion (2)\",\n      measure: MEASUREMENTS.distance,\n      value: 0,\n    },\n    temperature: {\n      description: \"Temperature\",\n      measure: MEASUREMENTS.temperature,\n      value: 0,\n    },\n    moisture: {\n      description: \"Moisture\",\n      measure: MEASUREMENTS.moisture,\n      value: 0,\n    },\n  });\n\n  const [deviceState, setDeviceState] = useState({\n    light1: {\n      description: \"Light (1)\",\n      value: \"off\",\n    },\n    light2: {\n      description: \"Light (2)\",\n      value: \"off\",\n    },\n    light3: {\n      description: \"Light (3)\",\n      value: \"off\",\n    },\n  });\n\n  useEffect(() => {\n    const fetchData = async () => {\n      await new Promise((r) => setTimeout(r, 5000));\n      const copy = { ...sensorState };\n      const response = await getSensorData();\n      if (response.success) {\n        Object.keys(response.response).map(\n          (key, index) => (copy[key].value = response.response[key])\n        );\n        setSensorState({ ...copy });\n      }\n    };\n    fetchData();\n  }, [sensorState]);\n\n  useEffect(() => {\n    const fetchData = async () => {\n      const copy = { ...deviceState };\n      const response = await getDeviceData();\n      if (response.success) {\n        Object.keys(response.response).map(\n          (key, index) => (copy[key].value = response.response[key])\n        );\n        setDeviceState({ ...copy });\n      }\n    };\n    fetchData();\n  }, []);\n\n  return (\n    <div className=\"App-header\">\n      <Container\n        maxWidth=\"lg\"\n        sx={{ backgroundColor: \"#778899\", minHeight: \"100vh\" }}\n      >\n        <Stack>\n          <h2>Sensor Data:</h2>\n          <Stack sx={{ marginLeft: 3 }}>\n            {Object.keys(sensorState).map((key, index) => (\n              <SensorValueRow\n                description={sensorState[key].description}\n                value={sensorState[key].value}\n                measure={sensorState[key].measure}\n              />\n            ))}\n          </Stack>\n          <Divider />\n\n          <h2>Device Status:</h2>\n          <Stack sx={{ marginLeft: 3 }}>\n            {Object.keys(deviceState).map((key, index) => (\n              <ButtonDeviceRow\n                description={deviceState[key].description}\n                selectedValue={deviceState[key].value}\n                buttonsValueTitleSet={ON_OF_SET}\n                setSelectedValue={(value) => {\n                  const copy = { ...deviceState };\n                  copy[key].value = value;\n                  setDeviceState({ ...copy });\n                  updateDeviceState(key, value);\n                }}\n              />\n            ))}\n          </Stack>\n        </Stack>\n      </Container>\n    </div>\n  );\n}\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}