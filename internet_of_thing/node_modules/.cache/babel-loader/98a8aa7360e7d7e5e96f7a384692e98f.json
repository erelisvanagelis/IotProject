{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Acer\\\\ReactNativeProjects\\\\internet_of_things\\\\src\\\\App.js\",\n    _s = $RefreshSig$();\n\nimport logo from \"./logo.svg\";\nimport \"./App.css\";\nimport { Box, Container, Divider, Stack } from \"@mui/material\";\nimport { sizing } from \"@mui/system\";\nimport SensorValueRow from \"./components/SensorValueRow\";\nimport { useEffect, useState } from \"react\";\nimport ButtonDeviceRow from \"./components/ButtonDeviceRow\";\nimport { ON_OF_SET, MEASUREMENTS } from \"./util/Constants\";\nimport { getDeviceData, getSensorData, updateDeviceState } from \"./API/IoT\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction App() {\n  _s();\n\n  const [sensorState, setSensorState] = useState({\n    motion1: 0,\n    motion2: 0,\n    temperature: 0,\n    moisture: 0\n  });\n  const [deviceState, setDeviceState] = useState({\n    light1: \"off\",\n    light2: \"off\",\n    light3: \"off\"\n  });\n  useEffect(() => {\n    const fetchData = async () => {\n      const response = await getSensorData();\n\n      if (response.success) {\n        setSensorState({ ...response.response\n        });\n      }\n    };\n\n    fetchData();\n  }, [sensorState]);\n  useEffect(() => {\n    const fetchData = async () => {\n      const response = await getDeviceData();\n\n      if (response.success) {\n        setDeviceState({ ...response.response\n        });\n      }\n    };\n\n    fetchData();\n  }, []);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"App-header\",\n    children: /*#__PURE__*/_jsxDEV(Container, {\n      maxWidth: \"lg\",\n      sx: {\n        backgroundColor: \"#778899\",\n        minHeight: \"100vh\"\n      },\n      children: /*#__PURE__*/_jsxDEV(Stack, {\n        children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n          children: \"Sensor Data:\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 52,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Stack, {\n          sx: {\n            marginLeft: 3\n          },\n          children: [/*#__PURE__*/_jsxDEV(SensorValueRow, {\n            description: \"Motion (1)\",\n            value: sensorState.motion1,\n            measure: MEASUREMENTS.distance\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 54,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(SensorValueRow, {\n            description: \"Motion (2)\",\n            value: sensorState.motion2,\n            measure: MEASUREMENTS.distance\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 59,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(SensorValueRow, {\n            description: \"Temperature\",\n            value: sensorState.temperature,\n            measure: MEASUREMENTS.temperature\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 64,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(SensorValueRow, {\n            description: \"Moisture\",\n            value: sensorState.moisture,\n            measure: MEASUREMENTS.moisture\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 69,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 53,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Divider, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 75,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"h2\", {\n          children: \"Device Status:\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 77,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Stack, {\n          sx: {\n            marginLeft: 3\n          },\n          children: [/*#__PURE__*/_jsxDEV(ButtonDeviceRow, {\n            description: \"Light (1)\",\n            selectedValue: deviceState.light1,\n            buttonsValueTitleSet: ON_OF_SET,\n            setSelectedValue: value => {\n              setDeviceState({ ...deviceState,\n                light1: value\n              });\n              updateDeviceState(\"light1\", value);\n            }\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 79,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(ButtonDeviceRow, {\n            description: \"Light (2)\",\n            selectedValue: deviceState.light2,\n            buttonsValueTitleSet: ON_OF_SET,\n            setSelectedValue: value => {\n              setDeviceState({ ...deviceState,\n                light2: value\n              });\n              updateDeviceState(\"light2\", value);\n            }\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 88,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(ButtonDeviceRow, {\n            description: \"Light (3)\",\n            selectedValue: deviceState.light3,\n            buttonsValueTitleSet: ON_OF_SET,\n            setSelectedValue: value => {\n              setDeviceState({ ...deviceState,\n                light3: value\n              });\n              updateDeviceState(\"light3\", value);\n            }\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 97,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 78,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 51,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 47,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 46,\n    columnNumber: 5\n  }, this);\n}\n\n_s(App, \"vbs5xxN9liGc8PTjHyf0dQT4eVc=\");\n\n_c = App;\nexport default App;\n\nvar _c;\n\n$RefreshReg$(_c, \"App\");","map":{"version":3,"sources":["C:/Users/Acer/ReactNativeProjects/internet_of_things/src/App.js"],"names":["logo","Box","Container","Divider","Stack","sizing","SensorValueRow","useEffect","useState","ButtonDeviceRow","ON_OF_SET","MEASUREMENTS","getDeviceData","getSensorData","updateDeviceState","App","sensorState","setSensorState","motion1","motion2","temperature","moisture","deviceState","setDeviceState","light1","light2","light3","fetchData","response","success","backgroundColor","minHeight","marginLeft","distance","value"],"mappings":"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","sourcesContent":["import logo from \"./logo.svg\";\nimport \"./App.css\";\nimport { Box, Container, Divider, Stack } from \"@mui/material\";\nimport { sizing } from \"@mui/system\";\nimport SensorValueRow from \"./components/SensorValueRow\";\nimport { useEffect, useState } from \"react\";\nimport ButtonDeviceRow from \"./components/ButtonDeviceRow\";\nimport { ON_OF_SET, MEASUREMENTS } from \"./util/Constants\";\nimport { getDeviceData, getSensorData, updateDeviceState } from \"./API/IoT\";\n\nfunction App() {\n  const [sensorState, setSensorState] = useState({\n    motion1: 0,\n    motion2: 0,\n    temperature: 0,\n    moisture: 0,\n  });\n\n  const [deviceState, setDeviceState] = useState({\n    light1: \"off\",\n    light2: \"off\",\n    light3: \"off\",\n  });\n\n  useEffect(() => {\n    const fetchData = async () => {\n      const response = await getSensorData()\n      if(response.success){\n        setSensorState({...response.response});\n      }\n    };\n    fetchData();\n  }, [sensorState]);\n\n  useEffect(() => {\n    const fetchData = async () => {\n      const response = await getDeviceData()\n      if(response.success){\n        setDeviceState({...response.response});\n      }\n    };\n    fetchData();\n  }, []);\n\n  return (\n    <div className=\"App-header\">\n      <Container\n        maxWidth=\"lg\"\n        sx={{ backgroundColor: \"#778899\", minHeight: \"100vh\" }}\n      >\n        <Stack>\n          <h2>Sensor Data:</h2>\n          <Stack sx={{ marginLeft: 3 }}>\n            <SensorValueRow\n              description={\"Motion (1)\"}\n              value={sensorState.motion1}\n              measure={MEASUREMENTS.distance}\n            />\n            <SensorValueRow\n              description={\"Motion (2)\"}\n              value={sensorState.motion2}\n              measure={MEASUREMENTS.distance}\n            />\n            <SensorValueRow\n              description={\"Temperature\"}\n              value={sensorState.temperature}\n              measure={MEASUREMENTS.temperature}\n            />\n            <SensorValueRow\n              description={\"Moisture\"}\n              value={sensorState.moisture}\n              measure={MEASUREMENTS.moisture}\n            />\n          </Stack>\n          <Divider />\n\n          <h2>Device Status:</h2>\n          <Stack sx={{ marginLeft: 3 }}>\n            <ButtonDeviceRow\n              description={\"Light (1)\"}\n              selectedValue={deviceState.light1}\n              buttonsValueTitleSet={ON_OF_SET}\n              setSelectedValue={(value) => {\n                setDeviceState({ ...deviceState, light1: value });\n                updateDeviceState(\"light1\", value);\n              }}\n            />\n            <ButtonDeviceRow\n              description={\"Light (2)\"}\n              selectedValue={deviceState.light2}\n              buttonsValueTitleSet={ON_OF_SET}\n              setSelectedValue={(value) => {\n                setDeviceState({ ...deviceState, light2: value });\n                updateDeviceState(\"light2\", value);\n              }}\n            />\n            <ButtonDeviceRow\n              description={\"Light (3)\"}\n              selectedValue={deviceState.light3}\n              buttonsValueTitleSet={ON_OF_SET}\n              setSelectedValue={(value) => {\n                setDeviceState({ ...deviceState, light3: value });\n                updateDeviceState(\"light3\", value);\n              }}\n            />\n          </Stack>\n        </Stack>\n      </Container>\n    </div>\n  );\n}\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}