{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Acer\\\\ReactNativeProjects\\\\internet_of_things\\\\src\\\\App.js\",\n    _s = $RefreshSig$();\n\nimport logo from \"./logo.svg\";\nimport \"./App.css\";\nimport { Box, Container, Divider, Stack } from \"@mui/material\";\nimport { sizing } from \"@mui/system\";\nimport SensorValueRow from \"./components/SensorValueRow\";\nimport { useEffect, useState } from \"react\";\nimport ButtonDeviceRow from \"./components/ButtonDeviceRow\";\nimport { ON_OF_SET, MEASUREMENTS } from \"./util/Constants\";\nimport { getDeviceData, getSensorData, updateDeviceState } from \"./API/IoT\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction App() {\n  _s();\n\n  const [testState, setTestState] = useState({\n    motion1: {\n      description: \"Motion (1)\",\n      value: 0,\n      measure: MEASUREMENTS.distance\n    },\n    motion2: {\n      description: \"Motion (2)\",\n      value: 69,\n      measure: MEASUREMENTS.distance\n    }\n  });\n  const [sensorState, setSensorState] = useState({\n    motion1: 0,\n    motion2: 0,\n    temperature: 0,\n    moisture: 0\n  });\n  const [deviceState, setDeviceState] = useState({\n    light1: \"off\",\n    light2: \"off\",\n    light3: \"off\"\n  });\n  useEffect(() => {\n    const fetchData = async () => {\n      const response = await getSensorData();\n\n      if (response.success) {\n        setSensorState({ ...response.response\n        });\n      }\n    };\n\n    fetchData();\n  }, [sensorState]);\n  useEffect(() => {\n    const fetchData = async () => {\n      const response = await getDeviceData();\n\n      if (response.success) {\n        setDeviceState({ ...response.response\n        });\n      }\n    };\n\n    fetchData();\n  }, []);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"App-header\",\n    children: /*#__PURE__*/_jsxDEV(Container, {\n      maxWidth: \"lg\",\n      sx: {\n        backgroundColor: \"#778899\",\n        minHeight: \"100vh\"\n      },\n      children: /*#__PURE__*/_jsxDEV(Stack, {\n        children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n          children: \"Sensor Data:\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 66,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Stack, {\n          children: // testState.map((sensor) => console.log(sensor))\n          Object.keys(testState).map((key, index) => /*#__PURE__*/_jsxDEV(\"p\", {\n            children: [\" this is my key \", key, \" and this is my value \", testState[key]]\n          }, index, true, {\n            fileName: _jsxFileName,\n            lineNumber: 73,\n            columnNumber: 15\n          }, this))\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 68,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Divider, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 101,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"h2\", {\n          children: \"Device Status:\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 103,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Stack, {\n          sx: {\n            marginLeft: 3\n          },\n          children: [/*#__PURE__*/_jsxDEV(ButtonDeviceRow, {\n            description: \"Light (1)\",\n            selectedValue: deviceState.light1,\n            buttonsValueTitleSet: ON_OF_SET,\n            setSelectedValue: value => {\n              setDeviceState({ ...deviceState,\n                light1: value\n              });\n              updateDeviceState(\"light1\", value);\n            }\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 105,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(ButtonDeviceRow, {\n            description: \"Light (2)\",\n            selectedValue: deviceState.light2,\n            buttonsValueTitleSet: ON_OF_SET,\n            setSelectedValue: value => {\n              setDeviceState({ ...deviceState,\n                light2: value\n              });\n              updateDeviceState(\"light2\", value);\n            }\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 114,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(ButtonDeviceRow, {\n            description: \"Light (3)\",\n            selectedValue: deviceState.light3,\n            buttonsValueTitleSet: ON_OF_SET,\n            setSelectedValue: value => {\n              setDeviceState({ ...deviceState,\n                light3: value\n              });\n              updateDeviceState(\"light3\", value);\n            }\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 123,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 104,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 65,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 61,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 60,\n    columnNumber: 5\n  }, this);\n}\n\n_s(App, \"RcnwZ5lWPxpoEOc311OA1v/wXzE=\");\n\n_c = App;\nexport default App;\n\nvar _c;\n\n$RefreshReg$(_c, \"App\");","map":{"version":3,"sources":["C:/Users/Acer/ReactNativeProjects/internet_of_things/src/App.js"],"names":["logo","Box","Container","Divider","Stack","sizing","SensorValueRow","useEffect","useState","ButtonDeviceRow","ON_OF_SET","MEASUREMENTS","getDeviceData","getSensorData","updateDeviceState","App","testState","setTestState","motion1","description","value","measure","distance","motion2","sensorState","setSensorState","temperature","moisture","deviceState","setDeviceState","light1","light2","light3","fetchData","response","success","backgroundColor","minHeight","Object","keys","map","key","index","marginLeft"],"mappings":"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","sourcesContent":["import logo from \"./logo.svg\";\nimport \"./App.css\";\nimport { Box, Container, Divider, Stack } from \"@mui/material\";\nimport { sizing } from \"@mui/system\";\nimport SensorValueRow from \"./components/SensorValueRow\";\nimport { useEffect, useState } from \"react\";\nimport ButtonDeviceRow from \"./components/ButtonDeviceRow\";\nimport { ON_OF_SET, MEASUREMENTS } from \"./util/Constants\";\nimport { getDeviceData, getSensorData, updateDeviceState } from \"./API/IoT\";\n\nfunction App() {\n  const [testState, setTestState] = useState({\n    motion1: {\n      description: \"Motion (1)\",\n      value: 0,\n      measure: MEASUREMENTS.distance,\n    },\n\n    motion2: {\n      description: \"Motion (2)\",\n      value: 69,\n      measure: MEASUREMENTS.distance,\n    },\n  });\n\n  const [sensorState, setSensorState] = useState({\n    motion1: 0,\n    motion2: 0,\n    temperature: 0,\n    moisture: 0,\n  });\n\n  const [deviceState, setDeviceState] = useState({\n    light1: \"off\",\n    light2: \"off\",\n    light3: \"off\",\n  });\n\n  useEffect(() => {\n    const fetchData = async () => {\n      const response = await getSensorData();\n      if (response.success) {\n        setSensorState({ ...response.response });\n      }\n    };\n    fetchData();\n  }, [sensorState]);\n\n  useEffect(() => {\n    const fetchData = async () => {\n      const response = await getDeviceData();\n      if (response.success) {\n        setDeviceState({ ...response.response });\n      }\n    };\n    fetchData();\n  }, []);\n\n  return (\n    <div className=\"App-header\">\n      <Container\n        maxWidth=\"lg\"\n        sx={{ backgroundColor: \"#778899\", minHeight: \"100vh\" }}\n      >\n        <Stack>\n          <h2>Sensor Data:</h2>\n\n          <Stack>\n            {\n\n            // testState.map((sensor) => console.log(sensor))\n            Object.keys(testState).map((key, index) => ( \n              <p key={index}> this is my key {key} and this is my value {testState[key]}</p> \n            ))\n\n            }\n            </Stack>\n\n          {/* <Stack sx={{ marginLeft: 3 }}>\n            <SensorValueRow\n              description={\"Motion (1)\"}\n              value={sensorState.motion1}\n              measure={MEASUREMENTS.distance}\n            />\n            <SensorValueRow\n              description={\"Motion (2)\"}\n              value={sensorState.motion2}\n              measure={MEASUREMENTS.distance}\n            />\n            <SensorValueRow\n              description={\"Temperature\"}\n              value={sensorState.temperature}\n              measure={MEASUREMENTS.temperature}\n            />\n            <SensorValueRow\n              description={\"Moisture\"}\n              value={sensorState.moisture}\n              measure={MEASUREMENTS.moisture}\n            />\n          </Stack> */}\n          <Divider />\n\n          <h2>Device Status:</h2>\n          <Stack sx={{ marginLeft: 3 }}>\n            <ButtonDeviceRow\n              description={\"Light (1)\"}\n              selectedValue={deviceState.light1}\n              buttonsValueTitleSet={ON_OF_SET}\n              setSelectedValue={(value) => {\n                setDeviceState({ ...deviceState, light1: value });\n                updateDeviceState(\"light1\", value);\n              }}\n            />\n            <ButtonDeviceRow\n              description={\"Light (2)\"}\n              selectedValue={deviceState.light2}\n              buttonsValueTitleSet={ON_OF_SET}\n              setSelectedValue={(value) => {\n                setDeviceState({ ...deviceState, light2: value });\n                updateDeviceState(\"light2\", value);\n              }}\n            />\n            <ButtonDeviceRow\n              description={\"Light (3)\"}\n              selectedValue={deviceState.light3}\n              buttonsValueTitleSet={ON_OF_SET}\n              setSelectedValue={(value) => {\n                setDeviceState({ ...deviceState, light3: value });\n                updateDeviceState(\"light3\", value);\n              }}\n            />\n          </Stack>\n        </Stack>\n      </Container>\n    </div>\n  );\n}\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}