{"ast":null,"code":"import _objectSpread from\"C:/Users/Acer/repos/IotProject/internet_of_thing/node_modules/@babel/runtime/helpers/esm/objectSpread2.js\";import _asyncToGenerator from\"C:/Users/Acer/repos/IotProject/internet_of_thing/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";import _slicedToArray from\"C:/Users/Acer/repos/IotProject/internet_of_thing/node_modules/@babel/runtime/helpers/esm/slicedToArray.js\";import _regeneratorRuntime from\"C:\\\\Users\\\\Acer\\\\repos\\\\IotProject\\\\internet_of_thing\\\\node_modules\\\\@babel\\\\runtime\\\\regenerator\\\\index.js\";import logo from\"./logo.svg\";import\"./App.css\";import{Box,Container,Divider,Stack}from\"@mui/material\";import{sizing}from\"@mui/system\";import SensorValueRow from\"./components/SensorValueRow\";import{useEffect,useState}from\"react\";import ButtonDeviceRow from\"./components/ButtonDeviceRow\";import{ON_OF_SET,MEASUREMENTS}from\"./util/Constants\";import{getDeviceData,getSensorData,updateDeviceState}from\"./API/IoT\";import{jsx as _jsx}from\"react/jsx-runtime\";import{jsxs as _jsxs}from\"react/jsx-runtime\";function App(){var _useState=useState({temp1:{description:\"Temperature\",measure:MEASUREMENTS.temperature,value:0},humid1:{description:\"Humidity\",measure:MEASUREMENTS.moisture,value:0}}),_useState2=_slicedToArray(_useState,2),sensorState=_useState2[0],setSensorState=_useState2[1];var _useState3=useState({light1:{description:\"Light (1)\",value:\"off\"},light2:{description:\"Light (2)\",value:\"off\"},light3:{description:\"Light (3)\",value:\"off\"}}),_useState4=_slicedToArray(_useState3,2),deviceState=_useState4[0],setDeviceState=_useState4[1];useEffect(function(){var fetchData=/*#__PURE__*/function(){var _ref=_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee(){var copy,response;return _regeneratorRuntime.wrap(function _callee$(_context){while(1){switch(_context.prev=_context.next){case 0:_context.next=2;return new Promise(function(r){return setTimeout(r,300);});case 2:copy=_objectSpread({},sensorState);_context.next=5;return getSensorData();case 5:response=_context.sent;if(response.success){Object.keys(response.response).map(function(key,index){return copy[key].value=response.response[key];});}setSensorState(_objectSpread({},copy));case 8:case\"end\":return _context.stop();}}},_callee);}));return function fetchData(){return _ref.apply(this,arguments);};}();fetchData();},[sensorState]);useEffect(function(){var fetchData=/*#__PURE__*/function(){var _ref2=_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee2(){var copy,response;return _regeneratorRuntime.wrap(function _callee2$(_context2){while(1){switch(_context2.prev=_context2.next){case 0:console.log(\"fetchDeviceDataCalled\");_context2.next=3;return new Promise(function(r){return setTimeout(r,300);});case 3:copy=_objectSpread({},deviceState);_context2.next=6;return getDeviceData();case 6:response=_context2.sent;if(response.success){Object.keys(response.response).map(function(key,index){return copy[key].value=response.response[key];});}setDeviceState(_objectSpread({},copy));case 9:case\"end\":return _context2.stop();}}},_callee2);}));return function fetchData(){return _ref2.apply(this,arguments);};}();fetchData();},[deviceState]);return/*#__PURE__*/_jsx(\"div\",{className:\"App-header\",children:/*#__PURE__*/_jsx(Container,{maxWidth:\"lg\",sx:{backgroundColor:\"#778899\",minHeight:\"100vh\"},children:/*#__PURE__*/_jsxs(Stack,{children:[/*#__PURE__*/_jsx(\"h2\",{children:\"Sensor Data:\"}),/*#__PURE__*/_jsx(Stack,{sx:{marginLeft:3},children:Object.keys(sensorState).map(function(key,index){return/*#__PURE__*/_jsx(SensorValueRow,{description:sensorState[key].description,value:sensorState[key].value,measure:sensorState[key].measure});})}),/*#__PURE__*/_jsx(Divider,{}),/*#__PURE__*/_jsx(\"h2\",{children:\"Device Status:\"}),/*#__PURE__*/_jsx(Stack,{sx:{marginLeft:3},children:Object.keys(deviceState).map(function(key,index){return/*#__PURE__*/_jsx(ButtonDeviceRow,{description:deviceState[key].description,selectedValue:deviceState[key].value,buttonsValueTitleSet:ON_OF_SET,setSelectedValue:function setSelectedValue(value){return updateDeviceState(key,value);}});})})]})})});}export default App;","map":{"version":3,"sources":["C:/Users/Acer/repos/IotProject/internet_of_thing/src/App.js"],"names":["logo","Box","Container","Divider","Stack","sizing","SensorValueRow","useEffect","useState","ButtonDeviceRow","ON_OF_SET","MEASUREMENTS","getDeviceData","getSensorData","updateDeviceState","App","temp1","description","measure","temperature","value","humid1","moisture","sensorState","setSensorState","light1","light2","light3","deviceState","setDeviceState","fetchData","Promise","r","setTimeout","copy","response","success","Object","keys","map","key","index","console","log","backgroundColor","minHeight","marginLeft"],"mappings":"oiBAAA,MAAOA,CAAAA,IAAP,KAAiB,YAAjB,CACA,MAAO,WAAP,CACA,OAASC,GAAT,CAAcC,SAAd,CAAyBC,OAAzB,CAAkCC,KAAlC,KAA+C,eAA/C,CACA,OAASC,MAAT,KAAuB,aAAvB,CACA,MAAOC,CAAAA,cAAP,KAA2B,6BAA3B,CACA,OAASC,SAAT,CAAoBC,QAApB,KAAoC,OAApC,CACA,MAAOC,CAAAA,eAAP,KAA4B,8BAA5B,CACA,OAASC,SAAT,CAAoBC,YAApB,KAAwC,kBAAxC,CACA,OAASC,aAAT,CAAwBC,aAAxB,CAAuCC,iBAAvC,KAAgE,WAAhE,C,wFAEA,QAASC,CAAAA,GAAT,EAAe,CACb,cAAsCP,QAAQ,CAAC,CAC7CQ,KAAK,CAAE,CACLC,WAAW,CAAE,aADR,CAELC,OAAO,CAAEP,YAAY,CAACQ,WAFjB,CAGLC,KAAK,CAAE,CAHF,CADsC,CAM7CC,MAAM,CAAE,CACNJ,WAAW,CAAE,UADP,CAENC,OAAO,CAAEP,YAAY,CAACW,QAFhB,CAGNF,KAAK,CAAE,CAHD,CANqC,CAAD,CAA9C,wCAAOG,WAAP,eAAoBC,cAApB,eAaA,eAAsChB,QAAQ,CAAC,CAC7CiB,MAAM,CAAE,CACNR,WAAW,CAAE,WADP,CAENG,KAAK,CAAE,KAFD,CADqC,CAK7CM,MAAM,CAAE,CACNT,WAAW,CAAE,WADP,CAENG,KAAK,CAAE,KAFD,CALqC,CAS7CO,MAAM,CAAE,CACNV,WAAW,CAAE,WADP,CAENG,KAAK,CAAE,KAFD,CATqC,CAAD,CAA9C,yCAAOQ,WAAP,eAAoBC,cAApB,eAeAtB,SAAS,CAAC,UAAM,CACd,GAAMuB,CAAAA,SAAS,0FAAG,2KACV,IAAIC,CAAAA,OAAJ,CAAY,SAACC,CAAD,QAAOC,CAAAA,UAAU,CAACD,CAAD,CAAI,GAAJ,CAAjB,EAAZ,CADU,QAEVE,IAFU,kBAEEX,WAFF,wBAGOV,CAAAA,aAAa,EAHpB,QAGVsB,QAHU,eAIhB,GAAIA,QAAQ,CAACC,OAAb,CAAsB,CACpBC,MAAM,CAACC,IAAP,CAAYH,QAAQ,CAACA,QAArB,EAA+BI,GAA/B,CACE,SAACC,GAAD,CAAMC,KAAN,QAAiBP,CAAAA,IAAI,CAACM,GAAD,CAAJ,CAAUpB,KAAV,CAAkBe,QAAQ,CAACA,QAAT,CAAkBK,GAAlB,CAAnC,EADF,EAGD,CACDhB,cAAc,kBAAMU,IAAN,EAAd,CATgB,sDAAH,kBAATJ,CAAAA,SAAS,0CAAf,CAWAA,SAAS,GACV,CAbQ,CAaN,CAACP,WAAD,CAbM,CAAT,CAeAhB,SAAS,CAAC,UAAM,CACd,GAAMuB,CAAAA,SAAS,2FAAG,0JAChBY,OAAO,CAACC,GAAR,CAAY,uBAAZ,EADgB,uBAEV,IAAIZ,CAAAA,OAAJ,CAAY,SAACC,CAAD,QAAOC,CAAAA,UAAU,CAACD,CAAD,CAAI,GAAJ,CAAjB,EAAZ,CAFU,QAGVE,IAHU,kBAGEN,WAHF,yBAIOhB,CAAAA,aAAa,EAJpB,QAIVuB,QAJU,gBAKhB,GAAIA,QAAQ,CAACC,OAAb,CAAsB,CACpBC,MAAM,CAACC,IAAP,CAAYH,QAAQ,CAACA,QAArB,EAA+BI,GAA/B,CACE,SAACC,GAAD,CAAMC,KAAN,QAAiBP,CAAAA,IAAI,CAACM,GAAD,CAAJ,CAAUpB,KAAV,CAAkBe,QAAQ,CAACA,QAAT,CAAkBK,GAAlB,CAAnC,EADF,EAGD,CACDX,cAAc,kBAAMK,IAAN,EAAd,CAVgB,wDAAH,kBAATJ,CAAAA,SAAS,2CAAf,CAYAA,SAAS,GACV,CAdQ,CAcN,CAACF,WAAD,CAdM,CAAT,CAgBA,mBACE,YAAK,SAAS,CAAC,YAAf,uBACE,KAAC,SAAD,EACE,QAAQ,CAAC,IADX,CAEE,EAAE,CAAE,CAAEgB,eAAe,CAAE,SAAnB,CAA8BC,SAAS,CAAE,OAAzC,CAFN,uBAIE,MAAC,KAAD,yBACE,oCADF,cAEE,KAAC,KAAD,EAAO,EAAE,CAAE,CAAEC,UAAU,CAAE,CAAd,CAAX,UACGT,MAAM,CAACC,IAAP,CAAYf,WAAZ,EAAyBgB,GAAzB,CAA6B,SAACC,GAAD,CAAMC,KAAN,qBAC5B,KAAC,cAAD,EACE,WAAW,CAAElB,WAAW,CAACiB,GAAD,CAAX,CAAiBvB,WADhC,CAEE,KAAK,CAAEM,WAAW,CAACiB,GAAD,CAAX,CAAiBpB,KAF1B,CAGE,OAAO,CAAEG,WAAW,CAACiB,GAAD,CAAX,CAAiBtB,OAH5B,EAD4B,EAA7B,CADH,EAFF,cAWE,KAAC,OAAD,IAXF,cAaE,sCAbF,cAcE,KAAC,KAAD,EAAO,EAAE,CAAE,CAAE4B,UAAU,CAAE,CAAd,CAAX,UACGT,MAAM,CAACC,IAAP,CAAYV,WAAZ,EAAyBW,GAAzB,CAA6B,SAACC,GAAD,CAAMC,KAAN,qBAC5B,KAAC,eAAD,EACE,WAAW,CAAEb,WAAW,CAACY,GAAD,CAAX,CAAiBvB,WADhC,CAEE,aAAa,CAAEW,WAAW,CAACY,GAAD,CAAX,CAAiBpB,KAFlC,CAGE,oBAAoB,CAAEV,SAHxB,CAIE,gBAAgB,CAAE,0BAACU,KAAD,QAAWN,CAAAA,iBAAiB,CAAC0B,GAAD,CAAMpB,KAAN,CAA5B,EAJpB,EAD4B,EAA7B,CADH,EAdF,GAJF,EADF,EADF,CAkCD,CAED,cAAeL,CAAAA,GAAf","sourcesContent":["import logo from \"./logo.svg\";\nimport \"./App.css\";\nimport { Box, Container, Divider, Stack } from \"@mui/material\";\nimport { sizing } from \"@mui/system\";\nimport SensorValueRow from \"./components/SensorValueRow\";\nimport { useEffect, useState } from \"react\";\nimport ButtonDeviceRow from \"./components/ButtonDeviceRow\";\nimport { ON_OF_SET, MEASUREMENTS } from \"./util/Constants\";\nimport { getDeviceData, getSensorData, updateDeviceState } from \"./API/IoT\";\n\nfunction App() {\n  const [sensorState, setSensorState] = useState({\n    temp1: {\n      description: \"Temperature\",\n      measure: MEASUREMENTS.temperature,\n      value: 0,\n    },\n    humid1: {\n      description: \"Humidity\",\n      measure: MEASUREMENTS.moisture,\n      value: 0,\n    },\n  });\n\n  const [deviceState, setDeviceState] = useState({\n    light1: {\n      description: \"Light (1)\",\n      value: \"off\",\n    },\n    light2: {\n      description: \"Light (2)\",\n      value: \"off\",\n    },\n    light3: {\n      description: \"Light (3)\",\n      value: \"off\",\n    },\n  });\n\n  useEffect(() => {\n    const fetchData = async () => {\n      await new Promise((r) => setTimeout(r, 300));\n      const copy = { ...sensorState };\n      const response = await getSensorData();\n      if (response.success) {\n        Object.keys(response.response).map(\n          (key, index) => (copy[key].value = response.response[key])\n        );\n      }\n      setSensorState({ ...copy });\n    };\n    fetchData();\n  }, [sensorState]);\n\n  useEffect(() => {\n    const fetchData = async () => {\n      console.log(\"fetchDeviceDataCalled\");\n      await new Promise((r) => setTimeout(r, 300));\n      const copy = { ...deviceState };\n      const response = await getDeviceData();\n      if (response.success) {\n        Object.keys(response.response).map(\n          (key, index) => (copy[key].value = response.response[key])\n        );\n      }\n      setDeviceState({ ...copy });\n    };\n    fetchData();\n  }, [deviceState]);\n\n  return (\n    <div className=\"App-header\">\n      <Container\n        maxWidth=\"lg\"\n        sx={{ backgroundColor: \"#778899\", minHeight: \"100vh\" }}\n      >\n        <Stack>\n          <h2>Sensor Data:</h2>\n          <Stack sx={{ marginLeft: 3 }}>\n            {Object.keys(sensorState).map((key, index) => (\n              <SensorValueRow\n                description={sensorState[key].description}\n                value={sensorState[key].value}\n                measure={sensorState[key].measure}\n              />\n            ))}\n          </Stack>\n          <Divider />\n\n          <h2>Device Status:</h2>\n          <Stack sx={{ marginLeft: 3 }}>\n            {Object.keys(deviceState).map((key, index) => (\n              <ButtonDeviceRow\n                description={deviceState[key].description}\n                selectedValue={deviceState[key].value}\n                buttonsValueTitleSet={ON_OF_SET}\n                setSelectedValue={(value) => updateDeviceState(key, value)}\n              />\n            ))}\n          </Stack>\n        </Stack>\n      </Container>\n    </div>\n  );\n}\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}