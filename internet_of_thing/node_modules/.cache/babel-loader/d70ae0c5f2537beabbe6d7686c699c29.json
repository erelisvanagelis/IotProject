{"ast":null,"code":"import axios from \"axios\";\nconst api = axios.create({\n  baseURL: \"http://127.0.0.1:5000/\"\n});\n\nfunction getRandomInt(max) {\n  return Math.floor(Math.random() * max);\n}\n\nfunction getRandomOnOff() {\n  const max = 9;\n  const value = Math.floor(Math.random() * max);\n\n  if (value % 2 == 0) {\n    return \"on\";\n  } else {\n    return \"off\";\n  }\n}\n\nexport async function getSensorData() {\n  try {\n    const received = await api.get('/sensorData');\n    console.log(received); // console.log(received.data)\n    // const test = received.data\n    // const response = JSON.parse(test)\n    // await new Promise((r) => setTimeout(r, 1000));\n    // const response = {\n    //   motion1: getRandomInt(100),\n    //   motion2: getRandomInt(100),\n    //   temperature: getRandomInt(30),\n    //   moisture: getRandomInt(50),\n    // };\n    // console.log(response);\n\n    return {\n      success: true,\n      response: { ...received.data\n      }\n    };\n  } catch (error) {\n    console.error(error);\n    return {\n      success: false,\n      ...error\n    };\n  }\n}\nexport async function getDeviceData() {\n  try {\n    // const response = await api.get('/data/');\n    await new Promise(r => setTimeout(r, 1000));\n    const response = {\n      light1: getRandomOnOff(),\n      light2: getRandomOnOff(),\n      light3: getRandomOnOff()\n    }; // console.log(response);\n\n    return {\n      success: true,\n      response: { ...response\n      }\n    };\n  } catch (error) {\n    console.error(error);\n    return {\n      success: false,\n      ...error\n    };\n  }\n}\nexport async function updateDeviceState(device, state) {\n  try {\n    console.log(`device: ${device}, state: ${state}`);\n    const response = {\n      yeet: \"\"\n    }; // const response = await api.put(`/device/${state}`);\n\n    await new Promise(r => setTimeout(r, 1000));\n    console.log(response);\n    return {\n      success: true,\n      ...response\n    };\n  } catch (error) {\n    console.error(error);\n    return {\n      success: false,\n      ...error\n    };\n  }\n}","map":{"version":3,"sources":["C:/Users/Acer/ReactNativeProjects/internet_of_things/src/API/IoT.js"],"names":["axios","api","create","baseURL","getRandomInt","max","Math","floor","random","getRandomOnOff","value","getSensorData","received","get","console","log","success","response","data","error","getDeviceData","Promise","r","setTimeout","light1","light2","light3","updateDeviceState","device","state","yeet"],"mappings":"AAAA,OAAOA,KAAP,MAAkB,OAAlB;AAEA,MAAMC,GAAG,GAAGD,KAAK,CAACE,MAAN,CAAa;AACvBC,EAAAA,OAAO,EAAE;AADc,CAAb,CAAZ;;AAIA,SAASC,YAAT,CAAsBC,GAAtB,EAA2B;AACzB,SAAOC,IAAI,CAACC,KAAL,CAAWD,IAAI,CAACE,MAAL,KAAgBH,GAA3B,CAAP;AACD;;AAED,SAASI,cAAT,GAA0B;AACxB,QAAMJ,GAAG,GAAG,CAAZ;AACA,QAAMK,KAAK,GAAGJ,IAAI,CAACC,KAAL,CAAWD,IAAI,CAACE,MAAL,KAAgBH,GAA3B,CAAd;;AACA,MAAIK,KAAK,GAAG,CAAR,IAAa,CAAjB,EAAoB;AAClB,WAAO,IAAP;AACD,GAFD,MAEO;AACL,WAAO,KAAP;AACD;AACF;;AAED,OAAO,eAAeC,aAAf,GAA+B;AACpC,MAAI;AACF,UAAMC,QAAQ,GAAG,MAAMX,GAAG,CAACY,GAAJ,CAAQ,aAAR,CAAvB;AACAC,IAAAA,OAAO,CAACC,GAAR,CAAYH,QAAZ,EAFE,CAGF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,WAAO;AAAEI,MAAAA,OAAO,EAAE,IAAX;AAAiBC,MAAAA,QAAQ,EAAE,EAAE,GAAGL,QAAQ,CAACM;AAAd;AAA3B,KAAP;AACD,GAfD,CAeE,OAAOC,KAAP,EAAc;AACdL,IAAAA,OAAO,CAACK,KAAR,CAAcA,KAAd;AACA,WAAO;AAAEH,MAAAA,OAAO,EAAE,KAAX;AAAkB,SAAGG;AAArB,KAAP;AACD;AACF;AAED,OAAO,eAAeC,aAAf,GAA+B;AACpC,MAAI;AACF;AACA,UAAM,IAAIC,OAAJ,CAAaC,CAAD,IAAOC,UAAU,CAACD,CAAD,EAAI,IAAJ,CAA7B,CAAN;AACA,UAAML,QAAQ,GAAG;AACfO,MAAAA,MAAM,EAAEf,cAAc,EADP;AAEfgB,MAAAA,MAAM,EAAEhB,cAAc,EAFP;AAGfiB,MAAAA,MAAM,EAAEjB,cAAc;AAHP,KAAjB,CAHE,CAQF;;AACA,WAAO;AAAEO,MAAAA,OAAO,EAAE,IAAX;AAAiBC,MAAAA,QAAQ,EAAE,EAAE,GAAGA;AAAL;AAA3B,KAAP;AACD,GAVD,CAUE,OAAOE,KAAP,EAAc;AACdL,IAAAA,OAAO,CAACK,KAAR,CAAcA,KAAd;AACA,WAAO;AAAEH,MAAAA,OAAO,EAAE,KAAX;AAAkB,SAAGG;AAArB,KAAP;AACD;AACF;AAED,OAAO,eAAeQ,iBAAf,CAAiCC,MAAjC,EAAyCC,KAAzC,EAAgD;AACrD,MAAI;AACFf,IAAAA,OAAO,CAACC,GAAR,CAAa,WAAUa,MAAO,YAAWC,KAAM,EAA/C;AACA,UAAMZ,QAAQ,GAAG;AAAEa,MAAAA,IAAI,EAAE;AAAR,KAAjB,CAFE,CAGF;;AACA,UAAM,IAAIT,OAAJ,CAAaC,CAAD,IAAOC,UAAU,CAACD,CAAD,EAAI,IAAJ,CAA7B,CAAN;AACAR,IAAAA,OAAO,CAACC,GAAR,CAAYE,QAAZ;AACA,WAAO;AAAED,MAAAA,OAAO,EAAE,IAAX;AAAiB,SAAGC;AAApB,KAAP;AACD,GAPD,CAOE,OAAOE,KAAP,EAAc;AACdL,IAAAA,OAAO,CAACK,KAAR,CAAcA,KAAd;AACA,WAAO;AAAEH,MAAAA,OAAO,EAAE,KAAX;AAAkB,SAAGG;AAArB,KAAP;AACD;AACF","sourcesContent":["import axios from \"axios\";\r\n\r\nconst api = axios.create({\r\n  baseURL: \"http://127.0.0.1:5000/\",\r\n});\r\n\r\nfunction getRandomInt(max) {\r\n  return Math.floor(Math.random() * max);\r\n}\r\n\r\nfunction getRandomOnOff() {\r\n  const max = 9;\r\n  const value = Math.floor(Math.random() * max);\r\n  if (value % 2 == 0) {\r\n    return \"on\";\r\n  } else {\r\n    return \"off\";\r\n  }\r\n}\r\n\r\nexport async function getSensorData() {\r\n  try {\r\n    const received = await api.get('/sensorData');\r\n    console.log(received)\r\n    // console.log(received.data)\r\n    // const test = received.data\r\n    // const response = JSON.parse(test)\r\n    // await new Promise((r) => setTimeout(r, 1000));\r\n    // const response = {\r\n    //   motion1: getRandomInt(100),\r\n    //   motion2: getRandomInt(100),\r\n    //   temperature: getRandomInt(30),\r\n    //   moisture: getRandomInt(50),\r\n    // };\r\n    // console.log(response);\r\n    return { success: true, response: { ...received.data } };\r\n  } catch (error) {\r\n    console.error(error);\r\n    return { success: false, ...error };\r\n  }\r\n}\r\n\r\nexport async function getDeviceData() {\r\n  try {\r\n    // const response = await api.get('/data/');\r\n    await new Promise((r) => setTimeout(r, 1000));\r\n    const response = {\r\n      light1: getRandomOnOff(),\r\n      light2: getRandomOnOff(),\r\n      light3: getRandomOnOff(),\r\n    };\r\n    // console.log(response);\r\n    return { success: true, response: { ...response } };\r\n  } catch (error) {\r\n    console.error(error);\r\n    return { success: false, ...error };\r\n  }\r\n}\r\n\r\nexport async function updateDeviceState(device, state) {\r\n  try {\r\n    console.log(`device: ${device}, state: ${state}`);\r\n    const response = { yeet: \"\" };\r\n    // const response = await api.put(`/device/${state}`);\r\n    await new Promise((r) => setTimeout(r, 1000));\r\n    console.log(response);\r\n    return { success: true, ...response };\r\n  } catch (error) {\r\n    console.error(error);\r\n    return { success: false, ...error };\r\n  }\r\n}\r\n"]},"metadata":{},"sourceType":"module"}